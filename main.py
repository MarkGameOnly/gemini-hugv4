# === –ß–∞—Å—Ç—å 1: –ò–º–ø–æ—Ä—Ç—ã, init, FSM, –º–µ–Ω—é ===
import os
import asyncio
import random
import logging
import sqlite3
from datetime import datetime, timedelta
from dotenv import load_dotenv
from fastapi import FastAPI, Request, APIRouter
from handlers import logic

from aiogram import Bot, Dispatcher, F, types
from aiogram.types import (
    Message, BotCommand,
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.session.aiohttp import AiohttpSession

from openai import AsyncOpenAI

from crypto import create_invoice

conn = sqlite3.connect("users.db", check_same_thread=False)
cursor = conn.cursor()
FREE_USES_LIMIT = 10

def ensure_user(user_id: int):
    cursor.execute("SELECT 1 FROM users WHERE user_id = ?", (user_id,))
    if not cursor.fetchone():
        cursor.execute(
            "INSERT INTO users (user_id, usage_count, subscribed, subscription_expires, joined_at) VALUES (?, 0, 0, NULL, ?)",
            (user_id, datetime.now().strftime("%Y-%m-%d")),
        )
        conn.commit()

def is_subscribed(user_id: int) -> bool:
    cursor.execute("SELECT subscribed, subscription_expires FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    if not result:
        return False
    subscribed, expires = result
    if not subscribed or not expires:
        return False
    return datetime.strptime(expires, "%Y-%m-%d") >= datetime.now()

def get_usage_count(user_id: int) -> int:
    cursor.execute("SELECT usage_count FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    return result[0] if result else 0

def init_db():
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        usage_count INTEGER DEFAULT 0,
        subscribed BOOLEAN DEFAULT 0,
        subscription_expires TEXT,
        joined_at TEXT
    )
    """)
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS history (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        type TEXT,
        prompt TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    """)
    conn.commit()

init_db()

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ADMIN_ID = os.getenv("ADMIN_ID", "1082828397")
DOMAIN_URL = os.getenv("DOMAIN_URL")

session = AiohttpSession()
bot = Bot(token=BOT_TOKEN, session=session)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
client = AsyncOpenAI(api_key=OPENAI_API_KEY)

class GenStates(StatesGroup):
    await_text = State()
    await_image = State()

class AssistantState(StatesGroup):
    chatting = State()

class StateAssistant(StatesGroup):
    dialog = State()

def main_menu() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úçÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç"), KeyboardButton(text="üñº –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")],
            [KeyboardButton(text="üåå Gemini AI"), KeyboardButton(text="üå† Gemini –ü—Ä–∏–º–µ—Ä—ã")],
            [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üí∞ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")],
            [KeyboardButton(text="üìö –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?"), KeyboardButton(text="üìé –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã")]
        ],
        resize_keyboard=True
    )

@dp.message(Command("start"))
async def cmd_start(message: Message):
    user_id = message.from_user.id
    ensure_user(user_id)
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", reply_markup=main_menu())

@dp.message(Command("help"))
@dp.message(F.text == "üìö –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?")
async def how_to_use(message: Message):
    text = (
        "üìö <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n\n"
        "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: —Ç–µ–∫—Å—Ç, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –≤–∏–¥–µ–æ.\n"
        "2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: <i>¬´–ù–∞—Ä–∏—Å—É–π –¥—Ä–∞–∫–æ–Ω–∞ –≤ –ø—É—Å—Ç—ã–Ω–µ¬ª</i> üêâ\n"
        "3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ üì•\n\n"
        "üí° –î–ª—è —É–º–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ üß†.\n"
        "‚ÑπÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ –¥–∞–µ—Ç –±–æ–ª—å—à–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ —Å–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞."
    )
    await message.answer(text, parse_mode="HTML")

@dp.message(Command("profile"))
@dp.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def cmd_profile(message: Message):
    user_id = message.from_user.id
    ensure_user(user_id)
    cursor.execute("SELECT usage_count, subscribed, subscription_expires FROM users WHERE user_id = ?", (user_id,))
    usage_count, subscribed, expires = cursor.fetchone()

    if str(user_id) == ADMIN_ID:
        sub_status = "üü¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ‚Äî –¥–æ—Å—Ç—É–ø –≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–µ–Ω"
    elif subscribed and expires:
        expires_date = datetime.strptime(expires, "%Y-%m-%d").strftime("%d.%m.%Y")
        sub_status = f"üü¢ –ê–∫—Ç–∏–≤–Ω–∞ –¥–æ {expires_date}"
    else:
        sub_status = "üî¥ –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏"

    profile_text = (
        f"üßæ –í–∞—à ID: {user_id}\n"
        f"üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏–π: {usage_count}\n"
        f"üíº –ü–æ–¥–ø–∏—Å–∫–∞: {sub_status}"
    )
    await message.answer(profile_text)

    cursor.execute("SELECT type, prompt, created_at FROM history WHERE user_id = ? ORDER BY created_at DESC LIMIT 10", (user_id,))
    rows = cursor.fetchall()
    if not rows:
        await message.answer("üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")
    else:
        history_lines = [f"[{t}] {p[:40]}... ({c[:10]})" for t, p, c in rows]
        await message.answer("üïò –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:\n" + "\n".join(history_lines))

@dp.message(Command("admin"))
@dp.message(F.text == "üìä –ê–¥–º–∏–Ω–∫–∞")
async def admin_panel(message: Message):
    if str(message.from_user.id) != ADMIN_ID:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return

    today = datetime.now().date()
    week_ago = today - timedelta(days=7)
    month_ago = today - timedelta(days=30)
    year_ago = today - timedelta(days=365)

    def count_since(date):
        cursor.execute("SELECT COUNT(*) FROM users WHERE joined_at >= ?", (date.strftime("%Y-%m-%d"),))
        return cursor.fetchone()[0]

    stats = {
        "–í—Å–µ–≥–æ": count_since(datetime(1970, 1, 1)),
        "–°–µ–≥–æ–¥–Ω—è": count_since(today),
        "–ù–µ–¥–µ–ª—è": count_since(week_ago),
        "–ú–µ—Å—è—Ü": count_since(month_ago),
        "–ì–æ–¥": count_since(year_ago)
    }

    cursor.execute("SELECT COUNT(*) FROM users WHERE subscribed = 1")
    total_subs = cursor.fetchone()[0]

    text = f"üìà –ê–¥–º–∏–Ω–∫–∞:\n–ü–æ–¥–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–æ: {total_subs}\n"
    text += "\n".join([f"{k}: {v}" for k, v in stats.items()])
    await message.answer(text)

@dp.message(F.text == "üìé –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã")
async def project_links(message: Message):
    buttons = [
        [InlineKeyboardButton(text="üîó It Market", url="https://t.me/Itmarket1_bot")],
        [InlineKeyboardButton(text="üéÆ –ò–≥—Ä—ã —Å –∑–∞—Ä–∞–±–æ—Ç–∫–æ–º", url="https://t.me/One1WinOfficial_bot")],
        [InlineKeyboardButton(text="üì± –ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–æ–∫—Å–∏", url="https://t.me/Proxynumber_bot")],
        [InlineKeyboardButton(text="ü¶Å –£–ë–¢ –°–≤—è–∑–∫–∏", url="https://t.me/LionMarket1_bot")],
        [InlineKeyboardButton(text="üåï –ö—Ä–∏–ø—Ç–æ–º–∞—Ä–∫–µ—Ç", url="https://t.me/CryptoMoneyMark_bot")],
        [InlineKeyboardButton(text="üé¨ –§–∏–ª—å–º—ã –∏ —Å–µ—Ä–∏–∞–ª—ã", url="https://t.me/RedirectIT_bot")],
    ]
    await message.answer("üîó –ú–æ–∏ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–µ–∫—Ç—ã:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

@dp.message(Command("buy"))
@dp.message(F.text == "üí∞ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def buy_subscription(message: Message):
    user_id = message.from_user.id
    ensure_user(user_id)
    try:
        invoice_url = await create_invoice(user_id)
        if not invoice_url:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        await message.answer(
            "üí≥ –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ $1:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å $1", url=invoice_url)]]
            )
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")

# === –£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ ===
@dp.message(F.text == "üß† –£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫")
async def start_assistant(message: Message, state: FSMContext):
    await state.set_state(AssistantState.chatting)
    await message.answer("üß† –ü–æ–º–æ—â–Ω–∏–∫ –≤–∫–ª—é—á–µ–Ω! –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, –≤–≤–µ–¥–∏—Ç–µ /stop")

@dp.message(Command("stop"))
async def stop_assistant(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üö© –ü–æ–º–æ—â–Ω–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")

@dp.message(AssistantState.chatting)
async def handle_assistant_message(message: Message, state: FSMContext):
    user_input = message.text
    await message.answer("‚è≥ –î—É–º–∞—é...")
    try:
        response = await client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã —É–º–Ω—ã–π Telegram-–ø–æ–º–æ—â–Ω–∏–∫, –ø–æ–º–æ–≥–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ."},
                {"role": "user", "content": user_input}
            ],
            temperature=0.8,
            max_tokens=1024,
        )
        ai_reply = response.choices[0].message.content.strip()
        await message.answer(ai_reply)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ ===
@dp.message(F.text == "‚úçÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç")
async def handle_text_generation(message: Message, state: FSMContext):
    await message.answer("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞—á–∞–ª–∞—Å—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    asyncio.create_task(generate_text_logic(message))

async def generate_text_logic(message: Message):
    try:
        user_id = message.from_user.id
        ensure_user(user_id)

        if not is_subscribed(user_id) and get_usage_count(user_id) >= FREE_USES_LIMIT:
            await message.answer("üîê –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω. –ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")
            return

        response = await client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": "–ù–∞–ø–∏—à–∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â—É—é —Ü–∏—Ç–∞—Ç—É"}],
            max_tokens=100,
        )
        text = response.choices[0].message.content.strip()
        await message.answer(f"üìù {text}")

        cursor.execute("UPDATE users SET usage_count = usage_count + 1 WHERE user_id = ?", (user_id,))
        conn.commit()
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ===
@dp.message(F.text == "üñº –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
async def handle_image_prompt(message: Message, state: FSMContext):
    await state.set_state(GenStates.await_image)
    await message.answer("üîºÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

@dp.message(GenStates.await_image)
async def generate_image(message: Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        ensure_user(user_id)

        if not is_subscribed(user_id) and get_usage_count(user_id) >= FREE_USES_LIMIT:
            await message.answer("üîê –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω. –ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")
            return

        prompt = message.text
        await message.answer("üß† –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")

        dalle = await client.images.generate(prompt=prompt, model="dall-e-3", n=1, size="1024x1024")
        image_url = dalle.data[0].url

        async with aiohttp.ClientSession() as s:
            async with s.get(image_url) as resp:
                if resp.status == 200:
                    image_bytes = await resp.read()
                    await message.answer_photo(types.BufferedInputFile(image_bytes, filename="image.png"))
                else:
                    await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å DALL-E")

        cursor.execute("UPDATE users SET usage_count = usage_count + 1 WHERE user_id = ?", (user_id,))
        cursor.execute("INSERT INTO history (user_id, type, prompt) VALUES (?, ?, ?)", (user_id, "image", prompt))
        conn.commit()

        await state.clear()
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


# === –ß–∞—Å—Ç—å 3: Gemini AI + –ü—Ä–∏–º–µ—Ä—ã + Webhook ===

@dp.message(F.text == "üåå Gemini AI")
async def start_gemini_dialog(message: Message, state: FSMContext):
    await message.answer("üåå –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ–∂–∏–º Gemini! –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–ø—Ä–æ—Å:")
    await state.set_state(StateAssistant.dialog)

@dp.message(StateAssistant.dialog)
async def handle_gemini_dialog(message: Message, state: FSMContext):
    user_id = message.from_user.id
    ensure_user(user_id)
    if str(user_id) != ADMIN_ID and not is_subscribed(user_id) and get_usage_count(user_id) >= FREE_USES_LIMIT:
        await message.answer("üîí –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω. –ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É üí∞")
        return

    try:
        response = await client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": message.text}]
        )
        reply = response.choices[0].message.content
        await message.answer(reply)
        cursor.execute("UPDATE users SET usage_count = usage_count + 1 WHERE user_id = ?", (user_id,))
        cursor.execute("INSERT INTO history (user_id, type, prompt) VALUES (?, ?, ?)", (user_id, "gemini", message.text))
        conn.commit()
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.message(F.text == "üå† Gemini –ü—Ä–∏–º–µ—Ä—ã")
async def gemini_examples(message: Message, state: FSMContext):
    examples = [
        [InlineKeyboardButton(text="–ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", callback_data="prompt_example"),
         InlineKeyboardButton(text="–ü–µ–π–∑–∞–∂", callback_data="img_landscape")],
        [InlineKeyboardButton(text="–ê–Ω–∏–º–µ-–¥–µ–≤—É—à–∫–∞", callback_data="img_anime_girl"),
         InlineKeyboardButton(text="–§—ç–Ω—Ç–µ–∑–∏-–≥–æ—Ä–æ–¥", callback_data="img_fantasy_city")],
        [InlineKeyboardButton(text="–û—Ñ–∏—Å", callback_data="img_modern_office"),
         InlineKeyboardButton(text="–î–µ—Å–µ—Ä—Ç", callback_data="img_food_dessert")],
        [InlineKeyboardButton(text="–õ—é–∫—Å-–∞–≤—Ç–æ", callback_data="img_luxury_car"),
         InlineKeyboardButton(text="–ò–Ω—Ç–µ—Ä—å–µ—Ä –ª–æ—Ñ—Ç", callback_data="img_loft_interior")],
        [InlineKeyboardButton(text="–ü–æ–≥–æ–¥–∞", callback_data="weather_example"),
         InlineKeyboardButton(text="–ù–æ–≤–æ—Å—Ç–∏", callback_data="news_example")],
        [InlineKeyboardButton(text="–§–∏–ª—å–º—ã", callback_data="movies_example"),
         InlineKeyboardButton(text="–ó–∞—Ä–∞–±–æ—Ç–æ–∫", callback_data="money_example")]
    ]
    extra_buttons = [[InlineKeyboardButton(text="üåπ –°–ª—É—á–∞–π–Ω—ã–π", callback_data="random_example")],
                     [InlineKeyboardButton(text="üîÑ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å", callback_data="new_query")]]
    keyboard = InlineKeyboardMarkup(inline_keyboard=examples + extra_buttons)
    await message.answer("üå† –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:", reply_markup=keyboard)
    await state.set_state(StateAssistant.dialog)

@dp.callback_query(F.data == "random_example")
async def gemini_random_example(callback: types.CallbackQuery, state: FSMContext):
    examples = [
        "img_landscape", "img_anime_girl", "img_fantasy_city", "img_modern_office",
        "img_food_dessert", "img_luxury_car", "img_loft_interior", "weather_example",
        "news_example", "movies_example", "money_example", "prompt_example"
    ]
    await gemini_dispatch(callback, state, random.choice(examples))

@dp.callback_query(F.data == "new_query")
async def gemini_new_query(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Ç–µ–º—É")
    await state.set_state(StateAssistant.dialog)
    await callback.answer()

@dp.callback_query()
async def gemini_dispatch(callback: types.CallbackQuery, state: FSMContext, example_id=None):
    data_id = example_id or callback.data
    prompt_map = {
        "img_landscape": "–ü–µ–π–∑–∞–∂ –Ω–∞ –∑–∞–∫–∞—Ç–µ, –≥–æ—Ä—ã, –æ–∑–µ—Ä–æ, 8K realism",
        "img_anime_girl": "–ê–Ω–∏–º–µ –¥–µ–≤—É—à–∫–∞ —Å –∫–∞—Ç–∞–Ω–æ–π –≤ Cyberpunk —Å—Ç–∏–ª–µ",
        "img_fantasy_city": "–§—ç–Ω—Ç–µ–∑–∏ –≥–æ—Ä–æ–¥ —Å –ª–µ—Ç–∞—é—â–∏–º–∏ –æ—Å—Ç—Ä–æ–≤–∞–º–∏",
        "img_modern_office": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ—Ñ–∏—Å, –ø–∞–Ω–æ—Ä–∞–º–Ω—ã–µ –æ–∫–Ω–∞",
        "img_food_dessert": "–î–µ—Å–µ—Ä—Ç, –∫–∞–∫ –Ω–∞ food-photography",
        "img_luxury_car": "–°–ø–æ—Ä—Ç–∫–∞—Ä –Ω–æ—á—å—é, –Ω–µ–æ–Ω, —É–ª–∏—Ü–∞, —Å—Ç–∏–ª—å 8K",
        "img_loft_interior": "–õ–æ—Ñ—Ç –∏–Ω—Ç–µ—Ä—å–µ—Ä, —Å–≤–µ—Ç, –∫–æ–º–Ω–∞—Ç–∞",
        "weather_example": "–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –ê–ª–º–∞—Ç—ã –∑–∞–≤—Ç—Ä–∞?",
        "news_example": "–ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å –≤ –º–∏—Ä–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞?",
        "movies_example": "–ß—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑ –Ω–æ–≤—ã—Ö —Ñ–∏–ª—å–º–æ–≤?",
        "money_example": "–ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π?",
        "prompt_example": "–ü—Ä–∏–¥—É–º–∞–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—É–ø–µ—Ä–∫–∞—Ä–∞"
    }
    prompt = prompt_map.get(data_id)
    if prompt:
        await handle_gemini_dialog(types.Message(message_id=callback.message.message_id, from_user=callback.from_user, text=prompt), state)
    await callback.answer()

router = APIRouter()

@router.post("/webhook")
async def telegram_webhook(request: Request):
    data = await request.json()
    update = types.Update(**data)
    await dp.feed_update(bot, update)
    return {"ok": True}

from contextlib import asynccontextmanager

@asynccontextmanager
async def lifespan(app: FastAPI):
    expected_url = f"{DOMAIN_URL}/webhook"
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_webhook(expected_url)
    logging.info(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω webhook: {expected_url}")

    await bot.set_my_commands([
        BotCommand(command="start", description="üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
        BotCommand(command="buy", description="üí∞ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"),
        BotCommand(command="profile", description="üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å"),
        BotCommand(command="help", description="üìö –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?"),
        BotCommand(command="admin", description="‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞")
    ])

    asyncio.create_task(logic.check_subscription_reminders())

    yield

    await session.close()

app = FastAPI(lifespan=lifespan)
app.include_router(router)

@app.get("/")
async def root():
    return {"status": "ok"}