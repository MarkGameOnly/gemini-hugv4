# === –ß–∞—Å—Ç—å 1: –ò–º–ø–æ—Ä—Ç—ã, init, FSM, –º–µ–Ω—é ===
import os
import asyncio
import random
import logging
logging.basicConfig(level=logging.INFO)
import sqlite3
from datetime import datetime, timedelta
from dotenv import load_dotenv
ADMIN_ID = None
from fastapi import FastAPI, Request, APIRouter
from contextlib import asynccontextmanager

import aiohttp  # üëà —É–±–µ–¥–∏—Å—å, —á—Ç–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
import httpx

from aiogram import Bot, Dispatcher, F, types
from aiogram.types import (
    Message, BotCommand,
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.session.aiohttp import AiohttpSession

from openai import AsyncOpenAI
from crypto import create_invoice, check_invoice

conn = sqlite3.connect("users.db", check_same_thread=False)
cursor = conn.cursor()
FREE_USES_LIMIT = 10

def init_db():
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        usage_count INTEGER DEFAULT 0,
        subscribed INTEGER DEFAULT 0,
        subscription_expires TEXT,
        joined_at TEXT
    )""")
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS history (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        type TEXT,
        prompt TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )""")
    conn.commit()

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===

def ensure_user(user_id: int):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â—ë –Ω–µ—Ç.
    """
    cursor.execute("SELECT 1 FROM users WHERE user_id = ?", (user_id,))
    if not cursor.fetchone():
        cursor.execute(
            "INSERT INTO users (user_id, usage_count, subscribed, subscription_expires, joined_at) VALUES (?, 0, 0, NULL, ?)",
            (user_id, datetime.now().strftime("%Y-%m-%d")),
        )
        conn.commit()

def activate_subscription(user_id: int):
    """
    –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 30 –¥–Ω–µ–π.
    """
    expires = (datetime.now() + timedelta(days=30)).strftime("%Y-%m-%d")
    cursor.execute(
        "UPDATE users SET subscribed = 1, subscription_expires = ? WHERE user_id = ?",
        (expires, user_id)
    )
    conn.commit()

def is_subscribed(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True.
    """
    if str(user_id) == str(ADMIN_ID):
        return True
    cursor.execute("SELECT subscribed, subscription_expires FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    if result:
        subscribed, expires = result
        if subscribed and expires:
            return datetime.strptime(expires, "%Y-%m-%d") >= datetime.now()
    return False

def get_usage_count(user_id: int) -> int:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π, —Å–¥–µ–ª–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    """
    cursor.execute("SELECT usage_count FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    return result[0] if result else 0

def increment_usage(user_id: int):
    """
    –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á—ë—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è.
    """
    if str(user_id) == str(ADMIN_ID):
        return
    cursor.execute("UPDATE users SET usage_count = usage_count + 1 WHERE user_id = ?", (user_id,))
    conn.commit()

def is_limited(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.
    –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –∏–º–µ–µ—Ç –ª–∏–º–∏—Ç–æ–≤.
    """
    if str(user_id) == str(ADMIN_ID):
        return False
    return not is_subscribed(user_id) and get_usage_count(user_id) >= FREE_USES_LIMIT

def save_quote(user_id: int, quote: str):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ü–∏—Ç–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ JSON.
    """
    append_json(quotes_path, {
        "user_id": user_id,
        "quote": quote,
        "timestamp": datetime.now().isoformat()
    })

def save_image_prompt(user_id: int, prompt: str, image_url: str):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–º–ø—Ç –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ JSON.
    """
    append_json(images_path, {
        "user_id": user_id,
        "prompt": prompt,
        "image_url": image_url,
        "timestamp": datetime.now().isoformat()
    })

# === –†–∞–±–æ—Ç–∞ —Å JSON ===
import json
from pathlib import Path

data_dir = Path("data")
data_dir.mkdir(exist_ok=True)

quotes_path = data_dir / "quotes.json"
images_path = data_dir / "images.json"
payments_path = data_dir / "payments.json"
logs_path = data_dir / "logs.json"

# –ê–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
for path in [quotes_path, images_path, payments_path, logs_path]:
    if not path.exists():
        try:
            with open(path, "w", encoding="utf-8") as f:
                json.dump([], f, ensure_ascii=False, indent=2)
            print(f"‚úÖ –§–∞–π–ª {path.name} —Å–æ–∑–¥–∞–Ω.")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ {path.name}: {e}")

def save_json(path, data):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def append_json(path, record):
    try:
        if path.exists():
            with open(path, "r", encoding="utf-8") as f:
                data = json.load(f)
        else:
            data = []
        data.append(record)
        save_json(path, data)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ {path.name}: {e}")

def log_user_action(user_id, action, details):
    append_json(logs_path, {
        "user_id": user_id,
        "action": action,
        "details": details,
        "timestamp": datetime.now().isoformat()
    })

def save_payment(user_id, invoice_id, amount):
    append_json(payments_path, {
        "user_id": user_id,
        "invoice_id": invoice_id,
        "amount": amount,
        "timestamp": datetime.now().isoformat()
    })
    
# === Webhook –æ—Ç CryptoBot ===
crypto_router = APIRouter()

@crypto_router.post("/cryptobot")
async def cryptobot_webhook(request: Request):
    try:
        data = await request.json()
        print("üîî Webhook –æ—Ç CryptoBot:", data)

        if data.get("event") == "invoice_paid":
            user_id = data.get("payload")
            invoice_id = data.get("invoice_id")
            amount = data.get("amount")

            if user_id:
                cursor.execute("UPDATE users SET subscribed = 1 WHERE user_id = ?", (user_id,))
                conn.commit()
                print(f"üîë –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è user_id={user_id}")
                try:
                    await bot.send_message(
                        user_id,
                        "üöÄ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø—Ä–æ–µ–∫—Ç–∞."
                    )
                    save_payment(user_id, invoice_id, amount)
                except Exception as e:
                    print(f"‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã: {e}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Webhook CryptoBot: {e}")

    return {"status": "ok"}

# === Webhook –æ—Ç Telegram (Amvera) ===
router = APIRouter()

@router.post("/webhook")
async def telegram_webhook(request: Request):
    try:
        data = await request.json()
        update = types.Update(**data)
        await dp.feed_update(bot, update)
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ø–¥–µ–π—Ç–∞: %s", e)
    return {"ok": True}

# === Lifespan + FastAPI –∏ —Ä–æ—É—Ç–µ—Ä—ã ===
@asynccontextmanager
async def lifespan(app: FastAPI):
    expected_url = f"{DOMAIN_URL}/webhook"
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_webhook(expected_url)
    logging.info(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω webhook: {expected_url}")

    await bot.set_my_commands([
        BotCommand(command="start", description="üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
        BotCommand(command="buy", description="üí∞ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"),
        BotCommand(command="profile", description="üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å"),
        BotCommand(command="help", description="üìö –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?"),
        BotCommand(command="admin", description="‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞")
    ])

    asyncio.create_task(check_subscription_reminders())
    yield
    await session.close()

app = FastAPI(lifespan=lifespan)
app.include_router(router)         # Telegram Webhook
app.include_router(crypto_router)  # CryptoBot Webhook

@app.get("/")
async def root():
    return {"status": "ok"}
    
# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
load_dotenv()  # –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ADMIN_ID = int(os.getenv("ADMIN_ID", "1082828397"))  # ‚Üê —Ç–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
DOMAIN_URL = os.getenv("DOMAIN_URL")

print(f"‚úÖ ADMIN_ID –∑–∞–≥—Ä—É–∂–µ–Ω: {ADMIN_ID}")  # ‚Üê –∏ —Ç–æ–ª—å–∫–æ —Ç–µ–ø–µ—Ä—å –ø–µ—á–∞—Ç–∞–µ–º

init_db()  # ‚Üê –º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å

session = AiohttpSession()
bot = Bot(token=BOT_TOKEN, session=session)
storage = MemoryStorage()
dp = Dispatcher(bot=bot, storage=storage)

timeout = httpx.Timeout(60.0, connect=20.0)
client = AsyncOpenAI(api_key=OPENAI_API_KEY, timeout=timeout)

# === –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö ===
async def check_subscription_reminders():
    while True:
        print("üîî –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö...")
        await asyncio.sleep(3600)

# === –°–æ—Å—Ç–æ—è–Ω–∏—è ===
class GenStates(StatesGroup):
    await_text = State()
    await_image = State()

class AssistantState(StatesGroup):
    chatting = State()

class StateAssistant(StatesGroup):
    dialog = State()

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
def main_menu() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úçÔ∏è –¶–∏—Ç–∞—Ç—ã –¥–Ω—è"), KeyboardButton(text="üñº –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")],
            [KeyboardButton(text="üåå Gemini AI"), KeyboardButton(text="üå† Gemini –ü—Ä–∏–º–µ—Ä—ã")],
            [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üí∞ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")],
            [KeyboardButton(text="üìö –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?"), KeyboardButton(text="üìé –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã")]
        ],
        resize_keyboard=True
    )
# === –¢–∞–π–º–∞—É—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ===
aiohttp_timeout = aiohttp.ClientTimeout(total=60)

# === –§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ===
async def fetch_image(session: aiohttp.ClientSession, url: str) -> bytes:
    async with session.get(url) as resp:
        if resp.status == 200:
            return await resp.read()
        raise Exception("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

# === –û–±–µ—Ä—Ç–∫–∞ –Ω–∞–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å DALL¬∑E ===
async def download_image(image_url: str) -> bytes:
    async with aiohttp.ClientSession(timeout=aiohttp_timeout) as s:
        return await fetch_image(s, image_url)

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ Gemini ===
def gemini_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
    )

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ –∏–∑ Gemini ===

@dp.callback_query(F.data == "back_to_menu")
async def back_to_main_menu(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("üîô –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())
    await callback.answer()

@dp.message(Command("stop"))
async def stop_command(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üõë –†–µ–∂–∏–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é:", reply_markup=main_menu())
    
    # === –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â—É—é —á–∞—Å—Ç—å ===

@dp.message(Command("start"))
async def cmd_start(message: Message):
    user_id = message.from_user.id
    ensure_user(user_id)
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", reply_markup=main_menu())

@dp.message(Command("help"))
@dp.message(F.text == "üìö –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?")
async def how_to_use(message: Message):
    text = (
        "üìö <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n\n"
        "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: —Ç–µ–∫—Å—Ç, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –≤–∏–¥–µ–æ.\n"
        "2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: <i>¬´–ù–∞—Ä–∏—Å—É–π –¥—Ä–∞–∫–æ–Ω–∞ –≤ –ø—É—Å—Ç—ã–Ω–µ¬ª</i> üêâ\n"
        "3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ üì•\n\n"
        "üí° –î–ª—è —É–º–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ üß†.\n"
        "‚ÑπÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ –¥–∞–µ—Ç –±–æ–ª—å—à–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ —Å–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞."
    )
    await message.answer(text, parse_mode="HTML")

# === –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
@dp.message(Command("profile"))
@dp.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def cmd_profile(message: Message):
    user_id = message.from_user.id
    ensure_user(user_id)
    cursor.execute("SELECT usage_count, subscribed, subscription_expires FROM users WHERE user_id = ?", (user_id,))
    usage_count, subscribed, expires = cursor.fetchone()

    if str(user_id) == str(ADMIN_ID):
        sub_status = "üü¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ‚Äî –¥–æ—Å—Ç—É–ø –≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–µ–Ω"
    elif subscribed and expires:
        expires_date = datetime.strptime(expires, "%Y-%m-%d").strftime("%d.%m.%Y")
        sub_status = f"üü¢ –ê–∫—Ç–∏–≤–Ω–∞ –¥–æ {expires_date}"
    else:
        sub_status = "üî¥ –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏"

    profile_text = (
        f"üßìÔ∏è –í–∞—à ID: {user_id}\n"
        f"üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏–π: {usage_count}\n"
        f"üíº –ü–æ–¥–ø–∏—Å–∫–∞: {sub_status}"
    )
    await message.answer(profile_text)

    cursor.execute("SELECT type, prompt, created_at FROM history WHERE user_id = ? ORDER BY created_at DESC LIMIT 10", (user_id,))
    rows = cursor.fetchall()
    if not rows:
        await message.answer("üìú –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")
    else:
        history_lines = [f"[{t}] {p[:40]}... ({c[:10]})" for t, p, c in rows]
        await message.answer("üïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:\n" + "\n".join(history_lines))

# === –ê–¥–º–∏–Ω–∫–∞ ===
@dp.message(Command("admin"))
@dp.message(F.text == "üìà –ê–¥–º–∏–Ω–∫–∞")
async def admin_panel(message: Message):
    user_id = str(message.from_user.id)
    admin_id_str = str(ADMIN_ID)

    # –õ–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ: user_id={user_id} vs ADMIN_ID={admin_id_str}")

    if user_id != admin_id_str:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return

    today = datetime.now().date()
    week_ago = today - timedelta(days=7)
    month_ago = today - timedelta(days=30)
    year_ago = today - timedelta(days=365)

    def count_since(date):
        cursor.execute("SELECT COUNT(*) FROM users WHERE joined_at >= ?", (date.strftime("%Y-%m-%d"),))
        return cursor.fetchone()[0]

    stats = {
        "–í—Å–µ–≥–æ": count_since(datetime(1970, 1, 1)),
        "–°–µ–≥–æ–¥–Ω—è": count_since(today),
        "–ù–µ–¥–µ–ª—è": count_since(week_ago),
        "–ú–µ—Å—è—Ü": count_since(month_ago),
        "–ì–æ–¥": count_since(year_ago)
    }

    cursor.execute("SELECT COUNT(*) FROM users WHERE subscribed = 1")
    total_subs = cursor.fetchone()[0]

    text = f"üìä <b>–ê–¥–º–∏–Ω–∫–∞:</b>\n<b>–ü–æ–¥–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–æ:</b> {total_subs}\n\n"
    text += "\n".join([f"<b>{k}:</b> {v}" for k, v in stats.items()])

    await message.answer(text, parse_mode="HTML")


# === –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã ===
@dp.message(F.text == "üìå –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã")
async def project_links(message: Message):
    buttons = [
        [InlineKeyboardButton(text="üîó It Market", url="https://t.me/Itmarket1_bot")],
        [InlineKeyboardButton(text="üéÆ –ò–≥—Ä—ã —Å –∑–∞—Ä–∞–±–æ—Ç–∫–æ–º", url="https://t.me/One1WinOfficial_bot")],
        [InlineKeyboardButton(text="üì± –ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–æ–∫—Å–∏", url="https://t.me/Proxynumber_bot")],
        [InlineKeyboardButton(text="üßë‚Äçü§ù–£–ë–¢ –°–≤—è–∑–∫–∏", url="https://t.me/LionMarket1_bot")],
        [InlineKeyboardButton(text="üåï –ö—Ä–∏–ø—Ç–æ–º–∞—Ä–∫–µ—Ç", url="https://t.me/CryptoMoneyMark_bot")],
        [InlineKeyboardButton(text="üéÆ –§–∏–ª—å–º—ã –∏ —Å–µ—Ä–∏–∞–ª—ã", url="https://t.me/RedirectIT_bot")],
    ]
    await message.answer("üîó –ú–æ–∏ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–µ–∫—Ç—ã:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))


@dp.message(Command("buy"))
@dp.message(F.text == "üí∞ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def buy_subscription(message: Message):
    user_id = message.from_user.id
    ensure_user(user_id)
    try:
        invoice_url = await create_invoice(user_id)
        if not invoice_url:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        await message.answer(
            "üí≥ –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ $1:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å $1", url=invoice_url)]]
            )
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        
# === –£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ ===
@dp.message(F.text == "üß† –£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫")
async def start_assistant(message: Message, state: FSMContext):
    await state.set_state(AssistantState.chatting)
    await message.answer(
        "üß† –ü–æ–º–æ—â–Ω–∏–∫ –≤–∫–ª—é—á–µ–Ω! –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üöë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="stop_assistant")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="stop_assistant")]
            ]
        )
    )

@dp.callback_query(F.data == "stop_assistant")
async def stop_assistant_button(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("üö© –ü–æ–º–æ—â–Ω–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())
    await callback.answer()

@dp.message(Command("stop"))
async def stop_assistant(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üö© –ü–æ–º–æ—â–Ω–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())

@dp.message(AssistantState.chatting)
async def handle_assistant_message(message: Message, state: FSMContext):
    user_id = message.from_user.id
    ensure_user(user_id)
    await message.answer("‚è≥ –î—É–º–∞—é...")

    try:
        if str(user_id) != str(ADMIN_ID) and is_limited(user_id):
            await message.answer("üîê –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω. –ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")
            return

        response = await client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã —É–º–Ω—ã–π Telegram-–ø–æ–º–æ—â–Ω–∏–∫, –ø–æ–º–æ–≥–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ."},
                {"role": "user", "content": message.text}
            ],
            temperature=0.8,
            max_tokens=1024,
            timeout=30.0
        )
        ai_reply = response.choices[0].message.content.strip()
        await message.answer(ai_reply)

        if str(user_id) != str(ADMIN_ID):
            increment_usage(user_id)
            cursor.execute("INSERT INTO history (user_id, type, prompt) VALUES (?, ?, ?)", (user_id, "assistant", message.text))
            conn.commit()
            log_user_action(user_id, "assistant_query", message.text)

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ assistant: {e}", exc_info=True)
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")


# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ ===
@dp.message(F.text == "‚úçÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç")
async def handle_text_generation(message: Message, state: FSMContext):
    await message.answer("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞—á–∞–ª–∞—Å—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    await generate_text_logic(message)

async def generate_text_logic(message: Message):
    try:
        user_id = message.from_user.id
        ensure_user(user_id)

        if str(user_id) != str(ADMIN_ID) and is_limited(user_id):
            await message.answer("üîê –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω. –ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")
            return

        response = await client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": "–ù–∞–ø–∏—à–∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â—É—é —Ü–∏—Ç–∞—Ç—É"}],
            max_tokens=100,
        )
        text = response.choices[0].message.content.strip()
        await message.answer(f"üìù {text}")

        if str(user_id) != str(ADMIN_ID):
            increment_usage(user_id)
            cursor.execute("INSERT INTO history (user_id, type, prompt) VALUES (?, ?, ?)", (user_id, "text", "–≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∞—è —Ü–∏—Ç–∞—Ç–∞"))
            conn.commit()
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ===
@dp.message(F.text == "üîº –°–æ–∑–¥–∞–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
async def handle_image_prompt(message: Message, state: FSMContext):
    await state.set_state(GenStates.await_image)
    await message.answer("üîºÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

@dp.message(GenStates.await_image)
async def process_image_generation(message: Message):
    try:
        user_id = message.from_user.id
        ensure_user(user_id)

        if str(user_id) != str(ADMIN_ID) and is_limited(user_id):
            await message.answer("üîê –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω. –ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")
            return

        prompt = message.text

        if not prompt or not isinstance(prompt, str) or len(prompt.strip()) < 3:
            await message.answer("‚ùå –ü—Ä–æ–º–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 3 —Å–∏–º–≤–æ–ª–æ–≤.")
            return

        await message.answer("ü§î –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")

        dalle = await client.images.generate(prompt=prompt, model="dall-e-3", n=1, size="1024x1024")
        image_url = dalle.data[0].url

        async with aiohttp.ClientSession() as session:
            async with session.get(image_url) as resp:
                if resp.status == 200:
                    image_bytes = await resp.read()
                    await message.answer_photo(types.BufferedInputFile(image_bytes, filename="image.png"))
                else:
                    await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")

        if str(user_id) != str(ADMIN_ID):
            increment_usage(user_id)
            cursor.execute("INSERT INTO history (user_id, type, prompt) VALUES (?, ?, ?)", (user_id, "image", prompt))
            conn.commit()

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

        
# === Gemini AI + –ü—Ä–∏–º–µ—Ä—ã + Webhook ===

@dp.message(F.text == "üåå Gemini AI")
async def start_gemini_dialog(message: Message, state: FSMContext):
    await message.answer(
        "üåå –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ–∂–∏–º Gemini! –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–ø—Ä–æ—Å:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="stop_assistant")]]
        )
    )
    await state.set_state(StateAssistant.dialog)

@dp.message(StateAssistant.dialog)
async def handle_gemini_dialog(message: Message, state: FSMContext):
    user_id = message.from_user.id
    ensure_user(user_id)

    if str(user_id) != str(ADMIN_ID) and not is_subscribed(user_id) and get_usage_count(user_id) >= FREE_USES_LIMIT:
        await message.answer("üîí –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω. –ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É üí∞")
        return

    try:
        response = await client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": message.text}],
            timeout=15.0
        )
        reply = response.choices[0].message.content
        await message.answer(reply)

        if str(user_id) != str(ADMIN_ID):
            increment_usage(user_id)
            cursor.execute("INSERT INTO history (user_id, type, prompt) VALUES (?, ?, ?)", (user_id, "gemini", message.text))
            conn.commit()
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ Gemini: {e}", exc_info=True)
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# === Gemini –ü—Ä–∏–º–µ—Ä—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ ===

@dp.message(F.text == "üå† Gemini –ü—Ä–∏–º–µ—Ä—ã")
async def gemini_examples(message: Message, state: FSMContext):
    examples = [
        [InlineKeyboardButton(text="–ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", callback_data="prompt_example"),
         InlineKeyboardButton(text="–ü–µ–π–∑–∞–∂", callback_data="img_landscape")],
        [InlineKeyboardButton(text="–ê–Ω–∏–º–µ-–¥–µ–≤—É—à–∫–∞", callback_data="img_anime_girl"),
         InlineKeyboardButton(text="–§—ç–Ω—Ç–µ–∑–∏-–≥–æ—Ä–æ–¥", callback_data="img_fantasy_city")],
        [InlineKeyboardButton(text="–û—Ñ–∏—Å", callback_data="img_modern_office"),
         InlineKeyboardButton(text="–î–µ—Å–µ—Ä—Ç", callback_data="img_food_dessert")],
        [InlineKeyboardButton(text="–õ—é–∫—Å-–∞–≤—Ç–æ", callback_data="img_luxury_car"),
         InlineKeyboardButton(text="–ò–Ω—Ç–µ—Ä—å–µ—Ä –ª–æ—Ñ—Ç", callback_data="img_loft_interior")],
        [InlineKeyboardButton(text="–ü–æ–≥–æ–¥–∞", callback_data="weather_example"),
         InlineKeyboardButton(text="–ù–æ–≤–æ—Å—Ç–∏", callback_data="news_example")],
        [InlineKeyboardButton(text="–§–∏–ª—å–º—ã", callback_data="movies_example"),
         InlineKeyboardButton(text="–ó–∞—Ä–∞–±–æ—Ç–æ–∫", callback_data="money_example")],
        [InlineKeyboardButton(text="üåπ –°–ª—É—á–∞–π–Ω—ã–π", callback_data="random_example")],
        [InlineKeyboardButton(text="‚ûî –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å", callback_data="new_query")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="stop_assistant")]
    ]
    await message.answer("\U0001f320 –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:",
                         reply_markup=InlineKeyboardMarkup(inline_keyboard=examples))
    await state.set_state(StateAssistant.dialog)

@dp.callback_query(F.data == "random_example")
async def gemini_random_example(callback: types.CallbackQuery, state: FSMContext):
    examples = [
        "img_landscape", "img_anime_girl", "img_fantasy_city", "img_modern_office",
        "img_food_dessert", "img_luxury_car", "img_loft_interior", "weather_example",
        "news_example", "movies_example", "money_example", "prompt_example"
    ]
    await gemini_dispatch(callback, state, random.choice(examples))

@dp.callback_query(F.data == "new_query")
async def gemini_new_query(callback: types.CallbackQuery, state: FSMContext):
    bot = callback.bot
    await bot.send_message(callback.from_user.id, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Ç–µ–º—É")
    await state.set_state(StateAssistant.dialog)
    await callback.answer()

@dp.callback_query()
async def gemini_dispatch(callback: types.CallbackQuery, state: FSMContext, example_id: str = None):
    bot = callback.bot
    user_id = callback.from_user.id
    ensure_user(user_id)

    if str(user_id) != str(ADMIN_ID) and not is_subscribed(user_id) and get_usage_count(user_id) >= FREE_USES_LIMIT:
        await bot.send_message(callback.from_user.id, "üîí –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω. –ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É üí∞")
        await callback.answer()
        return

    data_id = example_id or callback.data
    prompt_map = {
        "img_landscape": "–ü–µ–π–∑–∞–∂ –Ω–∞ –∑–∞–∫–∞—Ç–µ, –≥–æ—Ä—ã, –æ–∑–µ—Ä–æ, 8K realism",
        "img_anime_girl": "–ê–Ω–∏–º–µ –¥–µ–≤—É—à–∫–∞ —Å –∫–∞—Ç–∞–Ω–æ–π –≤ Cyberpunk —Å—Ç–∏–ª–µ",
        "img_fantasy_city": "–§—ç–Ω—Ç–µ–∑–∏ –≥–æ—Ä–æ–¥ —Å –ª–µ—Ç–∞—é—â–∏–º–∏ –æ—Å—Ç—Ä–æ–≤–∞–º–∏",
        "img_modern_office": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ—Ñ–∏—Å, –ø–∞–Ω–æ—Ä–∞–º–Ω—ã–µ –æ–∫–Ω–∞",
        "img_food_dessert": "–î–µ—Å–µ—Ä—Ç, –∫–∞–∫ –Ω–∞ food-photography",
        "img_luxury_car": "–°–ø–æ—Ä—Ç–∫–∞—Ä –Ω–æ—á—å—é, –Ω–µ–æ–Ω, —É–ª–∏—Ü–∞, —Å—Ç–∏–ª—å 8K",
        "img_loft_interior": "–õ–æ—Ñ—Ç –∏–Ω—Ç–µ—Ä—å–µ—Ä, —Å–≤–µ—Ç, –∫–æ–º–Ω–∞—Ç–∞",
        "weather_example": "–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –ê–ª–º–∞—Ç—ã –∑–∞–≤—Ç—Ä–∞?",
        "news_example": "–ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å –≤ –º–∏—Ä–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞?",
        "movies_example": "–ß—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑ –Ω–æ–≤—ã—Ö —Ñ–∏–ª—å–º–æ–≤?",
        "money_example": "–ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π?",
        "prompt_example": "–ü—Ä–∏–¥—É–º–∞–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—É–ø–µ—Ä–∫–∞—Ä–∞"
    }
    prompt = prompt_map.get(data_id)
    if not prompt:
        await callback.answer("‚ùå –ü—Ä–∏–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    if data_id.startswith("img_"):
        await process_image_generation(callback.message, prompt)
    else:
        fake_msg = types.Message(
            message_id=callback.message.message_id,
            date=callback.message.date,
            chat=callback.message.chat,
            from_user=callback.from_user,
            message_thread_id=callback.message.message_thread_id,
            text=prompt
        )
        await handle_gemini_dialog(fake_msg, state)
    await callback.answer()
