# === –ò–º–ø–æ—Ä—Ç—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ ===
import os
import asyncio
import random
import logging
import sqlite3
from datetime import datetime, timedelta
from fastapi import FastAPI, Request, APIRouter, Response
from fastapi.responses import JSONResponse
from contextlib import asynccontextmanager

# === –ò–º–ø–æ—Ä—Ç—ã —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ ===
from dotenv import load_dotenv
import aiohttp
import httpx

from aiogram import Bot, Dispatcher, F, types
from aiogram.types import (
    Message, BotCommand,
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.utils.markdown import hbold
from aiogram.dispatcher.middlewares.base import BaseMiddleware
from openai import AsyncOpenAI
from crypto import create_invoice, check_invoice

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("webhook.log", encoding="utf-8"),
        logging.FileHandler("errors.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()

# === –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
DOMAIN_URL = os.getenv("DOMAIN_URL")
ADMIN_ID = int(os.getenv("ADMIN_ID", "1082828397"))
print(f"‚úÖ ADMIN_ID –∑–∞–≥—Ä—É–∂–µ–Ω: {ADMIN_ID}")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===
conn = sqlite3.connect("users.db", check_same_thread=False)
cursor = conn.cursor()
FREE_USES_LIMIT = 10

def init_db(): 
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            usage_count INTEGER DEFAULT 0,
            subscribed INTEGER DEFAULT 0,
            subscription_expires TEXT,
            joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)

    # –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS history (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            type TEXT,
            prompt TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)

    # üõ° –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É joined_at, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç (–Ω–∞ —Å–ª—É—á–∞–π —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã)
    try:
        cursor.execute("ALTER TABLE users ADD COLUMN joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP")
    except sqlite3.OperationalError:
        pass  # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

    # üõ° –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    cursor.execute("SELECT 1 FROM users WHERE user_id = ?", (ADMIN_ID,))
    if not cursor.fetchone():
        cursor.execute(
            "INSERT INTO users (user_id, usage_count, subscribed, subscription_expires, joined_at) VALUES (?, 0, 1, NULL, ?)",
            (ADMIN_ID, datetime.now().strftime("%Y-%m-%d"))
        )

    conn.commit()


# === Middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ ensure_user ===
class EnsureUserMiddleware(BaseMiddleware):
    async def __call__(self, handler, event, data):
        if isinstance(event, types.Message) or isinstance(event, types.CallbackQuery):
            user_id = event.from_user.id
            cursor.execute("SELECT 1 FROM users WHERE user_id = ?", (user_id,))
            if not cursor.fetchone():
                is_admin_user = int(user_id) == ADMIN_ID
                cursor.execute(
                    "INSERT INTO users (user_id, usage_count, subscribed, subscription_expires, joined_at) VALUES (?, 0, ?, NULL, ?)",
                    (user_id, 1 if is_admin_user else 0, datetime.now().strftime("%Y-%m-%d"))
                )
                conn.commit()
        return await handler(event, data)

    
# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞ –∏ OpenAI –∫–ª–∏–µ–Ω—Ç–∞ ===
session = AiohttpSession()
bot = Bot(token=BOT_TOKEN, session=session)
storage = MemoryStorage()
dp = Dispatcher(bot=bot, storage=storage)
dp.message.middleware(EnsureUserMiddleware())
dp.callback_query.middleware(EnsureUserMiddleware())

timeout = httpx.Timeout(60.0, connect=20.0)
client = AsyncOpenAI(api_key=OPENAI_API_KEY, timeout=timeout)

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===

def ensure_user(user_id: int):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â—ë –Ω–µ—Ç.
    """
    cursor.execute("SELECT 1 FROM users WHERE user_id = ?", (user_id,))
    if not cursor.fetchone():
        is_admin_user = int(user_id) == ADMIN_ID
        cursor.execute(
            "INSERT INTO users (user_id, usage_count, subscribed, subscription_expires, joined_at) VALUES (?, 0, ?, NULL, ?)",
            (user_id, 1 if is_admin_user else 0, datetime.now().strftime("%Y-%m-%d")),
        )
        conn.commit()

def activate_subscription(user_id: int):
    """
    –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 30 –¥–Ω–µ–π.
    """
    expires = (datetime.now() + timedelta(days=30)).strftime("%Y-%m-%d")
    cursor.execute(
        "UPDATE users SET subscribed = 1, subscription_expires = ? WHERE user_id = ?",
        (expires, user_id)
    )
    conn.commit()

def is_subscribed(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True.
    """
    if str(user_id) == str(ADMIN_ID):
        return True
    cursor.execute("SELECT subscribed, subscription_expires FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    if result:
        subscribed, expires = result
        if subscribed and expires:
            return datetime.strptime(expires, "%Y-%m-%d") >= datetime.now()
    return False

def get_usage_count(user_id: int) -> int:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π, —Å–¥–µ–ª–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    """
    cursor.execute("SELECT usage_count FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    return result[0] if result else 0

def increment_usage(user_id: int):
    """
    –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á—ë—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è.
    """
    if str(user_id) == str(ADMIN_ID):
        return
    cursor.execute("UPDATE users SET usage_count = usage_count + 1 WHERE user_id = ?", (user_id,))
    conn.commit()

def is_limited(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.
    –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –∏–º–µ–µ—Ç –ª–∏–º–∏—Ç–æ–≤.
    """
    if str(user_id) == str(ADMIN_ID):
        return False
    return not is_subscribed(user_id) and get_usage_count(user_id) >= FREE_USES_LIMIT

def save_quote(user_id: int, quote: str):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ü–∏—Ç–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ JSON.
    """
    append_json(quotes_path, {
        "user_id": user_id,
        "quote": quote,
        "timestamp": datetime.now().isoformat()
    })

def save_image_prompt(user_id: int, prompt: str, image_url: str):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–º–ø—Ç –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ JSON.
    """
    append_json(images_path, {
        "user_id": user_id,
        "prompt": prompt,
        "image_url": image_url,
        "timestamp": datetime.now().isoformat()
    })
   # === –ß—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∞=== 
def is_admin(user_id: int) -> bool:
    return int(user_id) == ADMIN_ID

# === –†–∞–±–æ—Ç–∞ —Å JSON ===
import json
from pathlib import Path

data_dir = Path("data")
data_dir.mkdir(exist_ok=True)

quotes_path = data_dir / "quotes.json"
images_path = data_dir / "images.json"
payments_path = data_dir / "payments.json"
logs_path = data_dir / "logs.json"

# –ê–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
for path in [quotes_path, images_path, payments_path, logs_path]:
    if not path.exists():
        try:
            with open(path, "w", encoding="utf-8") as f:
                json.dump([], f, ensure_ascii=False, indent=2)
            print(f"‚úÖ –§–∞–π–ª {path.name} —Å–æ–∑–¥–∞–Ω.")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ {path.name}: {e}")

def save_json(path, data):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def append_json(path, record):
    try:
        if path.exists():
            try:
                with open(path, "r", encoding="utf-8") as f:
                    data = json.load(f)
            except json.JSONDecodeError:
                print(f"‚ö†Ô∏è –ü–æ–≤—Ä–µ–∂–¥—ë–Ω JSON-—Ñ–∞–π–ª: {path.name}. –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—é.")
                data = []
        else:
            data = []

        data.append(record)
        save_json(path, data)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ {path.name}: {e}")


def log_user_action(user_id, action, details):
    append_json(logs_path, {
        "user_id": user_id,
        "action": action,
        "details": details,
        "timestamp": datetime.now().isoformat()
    })

def save_payment(user_id, invoice_id, amount):
    append_json(payments_path, {
        "user_id": user_id,
        "invoice_id": invoice_id,
        "amount": amount,
        "timestamp": datetime.now().isoformat()
    })
    
# === Webhook CryptoBot ===
crypto_router = APIRouter()
@crypto_router.post("/cryptobot", response_class=JSONResponse)
async def cryptobot_webhook(request: Request):
    try:
        data = await request.json()
        logging.info(f"üîî Webhook –æ—Ç CryptoBot: {data}")
        if data.get("status") == "paid":
            user_id = int(data["order_id"])
            logging.info(f"‚úÖ –ü–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_id}")
            activate_subscription(user_id)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ Webhook CryptoBot: {e}", exc_info=True)
    return JSONResponse(content={"status": "ok"}, media_type="application/json")

# === Webhook –æ—Ç Telegram (Amvera) ===
router = APIRouter()
@router.post("/webhook", response_class=JSONResponse)
async def telegram_webhook(request: Request):
    try:
        data = await request.json()
        update = types.Update(**data)
        await dp.feed_update(bot, update)
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ø–¥–µ–π—Ç–∞")
    return JSONResponse(content={"ok": True}, media_type="application/json")

# === –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ, –µ—Å–ª–∏ –±–æ–ª—å—à–∏–µ ===
for log_file in ["webhook.log", "errors.log"]:
    if os.path.exists(log_file) and os.path.getsize(log_file) > 5_000_000:
        with open(log_file, "w", encoding="utf-8") as f:
            f.write(f"‚ö†Ô∏è –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –ª–æ–≥–∞ {log_file}: {datetime.now()}\n")


reminder_task_started = False  # –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –≤–Ω–µ lifespan

@asynccontextmanager
async def lifespan(app: FastAPI):
    global reminder_task_started

    expected_url = f"{DOMAIN_URL}/webhook"
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_webhook(expected_url)
    logging.info(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω webhook: {expected_url}")

    await bot.set_my_commands([
        BotCommand(command="start", description="üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
        BotCommand(command="buy", description="üí∞ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"),
        BotCommand(command="profile", description="üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å"),
        BotCommand(command="help", description="üìö –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?"),
        BotCommand(command="admin", description="‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞")
    ])

    # üõ°Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
    if not reminder_task_started:
        asyncio.create_task(check_subscription_reminders())
        reminder_task_started = True
        logging.info("‚è∞ –ó–∞–¥–∞—á–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –∑–∞–ø—É—â–µ–Ω–∞.")

    yield
    await session.close()

app = FastAPI(lifespan=lifespan)
app.include_router(router)         # Telegram Webhook
app.include_router(crypto_router)  # CryptoBot Webhook

@app.get("/")
async def root():
    return {"status": "ok"}

# === –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö ===
async def check_subscription_reminders():
    while True:
        try:
            print("üîî –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö...")
            tomorrow = (datetime.now() + timedelta(days=1)).strftime("%Y-%m-%d")

            cursor.execute("""
                SELECT user_id FROM users
                WHERE subscribed = 1 AND subscription_expires = ?
            """, (tomorrow,))

            users = cursor.fetchall()
            for user_id_tuple in users:
                user_id = user_id_tuple[0]
                try:
                    await bot.send_message(
                        user_id,
                        "üîî <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞. –ü—Ä–æ–¥–ª–∏—Ç–µ –µ—ë, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ—Å—Ç—É–ø.",
                        parse_mode="HTML"
                    )
                    print(f"üì® –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                except Exception as e:
                    logging.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user_id}: {e}")

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫: {e}", exc_info=True)

        await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ —á–∞—Å

# === –°–æ—Å—Ç–æ—è–Ω–∏—è ===
class GenStates(StatesGroup):
    await_text = State()
    await_image = State()

class AssistantState(StatesGroup):
    chatting = State()

class StateAssistant(StatesGroup):
    dialog = State()

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
def main_menu() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úçÔ∏è –¶–∏—Ç–∞—Ç—ã –¥–Ω—è"), KeyboardButton(text="üé®–°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")],
            [KeyboardButton(text="üåå Gemini AI"), KeyboardButton(text="üå† Gemini –ü—Ä–∏–º–µ—Ä—ã")],
            [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üí∞ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")],
            [KeyboardButton(text="üìö –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?"), KeyboardButton(text="üìé –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã")],
            [KeyboardButton(text="‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞")]  # ‚Üê –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
        ],
        resize_keyboard=True
    )

# === –¢–∞–π–º–∞—É—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ===
aiohttp_timeout = aiohttp.ClientTimeout(total=60)

# === –§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ===
async def fetch_image(session: aiohttp.ClientSession, url: str) -> bytes:
    async with session.get(url) as resp:
        if resp.status == 200:
            return await resp.read()
        raise Exception("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

# === –û–±–µ—Ä—Ç–∫–∞ –Ω–∞–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å DALL¬∑E ===
async def download_image(image_url: str) -> bytes:
    async with aiohttp.ClientSession(timeout=aiohttp_timeout) as s:
        return await fetch_image(s, image_url)

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ Gemini ===
def gemini_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
    )

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ –∏–∑ Gemini ===

@dp.callback_query(F.data == "back_to_menu")
async def back_to_main_menu(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("üîô –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())
    await callback.answer()

@dp.message(Command("stop"))
async def stop_command(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üõë –†–µ–∂–∏–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é:", reply_markup=main_menu())
    
    # === –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â—É—é —á–∞—Å—Ç—å ===

@dp.message(Command("start"))
async def cmd_start(message: Message):
    user_id = message.from_user.id
    ensure_user(user_id)
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", reply_markup=main_menu())

@dp.message(Command("help"))
@dp.message(F.text == "üìö –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?")
async def how_to_use(message: Message):
    text = (
        "üìö <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n\n"
        "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: —Ç–µ–∫—Å—Ç, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –≤–∏–¥–µ–æ.\n"
        "2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: <i>¬´–ù–∞—Ä–∏—Å—É–π –¥—Ä–∞–∫–æ–Ω–∞ –≤ –ø—É—Å—Ç—ã–Ω–µ¬ª</i> üêâ\n"
        "3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ üì•\n\n"
        "üí° –î–ª—è —É–º–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ üååGemini AI.\n"
        "‚ÑπÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ –¥–∞–µ—Ç –±–æ–ª—å—à–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ —Å–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞."
    )
    await message.answer(text, parse_mode="HTML")

# === –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
@dp.message(Command("profile"))
@dp.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def cmd_profile(message: Message):
    user_id = message.from_user.id
    ensure_user(user_id)
    cursor.execute("SELECT usage_count, subscribed, subscription_expires FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    if not row:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è.")
        return
    usage_count, subscribed, expires = row

    if str(user_id) == str(ADMIN_ID):
        sub_status = "üü¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ‚Äî –¥–æ—Å—Ç—É–ø –≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–µ–Ω"
    elif subscribed and expires:
        expires_date = datetime.strptime(expires, "%Y-%m-%d").strftime("%d.%m.%Y")
        sub_status = f"üü¢ –ê–∫—Ç–∏–≤–Ω–∞ –¥–æ {expires_date}"
    else:
        sub_status = "üî¥ –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏"

    profile_text = (
        f"üßìÔ∏è –í–∞—à ID: {user_id}\n"
        f"üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏–π: {usage_count}\n"
        f"üíº –ü–æ–¥–ø–∏—Å–∫–∞: {sub_status}"
    )
    await message.answer(profile_text)

    cursor.execute("SELECT type, prompt, created_at FROM history WHERE user_id = ? ORDER BY created_at DESC LIMIT 10", (user_id,))
    rows = cursor.fetchall()
    if not rows:
        await message.answer("üìú –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")
    else:
        history_lines = [
            f"[{t}] {p.strip()[:40] + ('...' if len(p.strip()) > 40 else '')} ({c[:10]})"
            for t, p, c in rows
        ]
        output = "üïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:\n" + "\n".join(history_lines)
        if len(output) > 4000:
            output = output[:3990] + "\n... (–æ–±—Ä–µ–∑–∞–Ω–æ)"
        await message.answer(output)


# === –ê–¥–º–∏–Ω–∫–∞ ===

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è FSM
class AdminStates(StatesGroup):
    awaiting_broadcast_content = State()

def log_admin_action(user_id: int, action: str):
    with open("admin.log", "a", encoding="utf-8") as f:
        f.write(f"{datetime.now().isoformat()} ‚Äî ADMIN [{user_id}]: {action}\n")

def is_admin(user_id: int) -> bool:
    return str(user_id) == str(ADMIN_ID)

@dp.message(Command("admin"))
async def admin_panel(message: Message):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return

    log_admin_action(user_id, "–û—Ç–∫—Ä—ã–ª –∞–¥–º–∏–Ω–∫—É /admin")
    logging.info(f"üï§ –ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–¥–º–∏–Ω–∫—É –æ—Ç: {user_id}")

    today = datetime.now().date()
    week_ago = today - timedelta(days=7)
    month_ago = today - timedelta(days=30)
    year_ago = today - timedelta(days=365)

    def count_since(date):
        cursor.execute("SELECT COUNT(*) FROM users WHERE joined_at >= ?", (date.strftime("%Y-%m-%d"),))
        return cursor.fetchone()[0]

    stats = {
        "–í—Å–µ–≥–æ": count_since(datetime(1970, 1, 1)),
        "–°–µ–≥–æ–¥–Ω—è": count_since(today),
        "–ù–µ–¥–µ–ª—è": count_since(week_ago),
        "–ú–µ—Å—è—Ü": count_since(month_ago),
        "–ì–æ–¥": count_since(year_ago)
    }

    cursor.execute("SELECT COUNT(*) FROM users WHERE subscribed = 1")
    total_subs = cursor.fetchone()[0]

    text = f"üìä <b>–ê–¥–º–∏–Ω–∫–∞:</b>\n<b>–ü–æ–¥–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–æ:</b> {total_subs}\n\n"
    text += "\n".join([f"<b>{k}:</b> {v}" for k, v in stats.items()])

    await message.answer(text, parse_mode="HTML", reply_markup=admin_inline_keyboard())

# === –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ ===
def admin_inline_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìú –õ–æ–≥–∏", callback_data="view_logs")],
        [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏", callback_data="clear_logs")],
        [InlineKeyboardButton(text="üìÑ Admin –ª–æ–≥", callback_data="view_admin_log")],
        [InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="start_broadcast")],
        [InlineKeyboardButton(text="üì¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç", callback_data="start_broadcast")]
    ])

# === –õ–æ–≥–∏ ===
async def send_log_file(message: Message, filename: str):
    try:
        if not os.path.exists(filename):
            await message.answer("üìú –õ–æ–≥-—Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç—É–µ—Ç.")
            return

        with open(filename, "r", encoding="utf-8") as f:
            content = f.read()

        if len(content) > 4000:
            lines = content.strip().split("\n")
            last_lines = "\n".join(lines[-50:])
            await message.answer(f"<code>{last_lines}</code>", parse_mode="HTML")
        else:
            await message.answer(f"<code>{content}</code>", parse_mode="HTML")

    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {filename}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.message(Command("logs"))
async def show_logs(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    log_admin_action(message.from_user.id, "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–ª /logs")
    await send_log_file(message, "webhook.log")

@dp.message(Command("errors"))
async def show_errors(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    log_admin_action(message.from_user.id, "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–ª /errors")
    await send_log_file(message, "errors.log")

@dp.callback_query(F.data == "view_admin_log")
async def cb_view_admin_log(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    log_admin_action(callback.from_user.id, "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–ª admin.log")
    await send_log_file(callback.message, "admin.log")
    await callback.answer()

@dp.callback_query(F.data == "view_logs")
async def cb_view_logs(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    log_admin_action(callback.from_user.id, "–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤")
    await send_log_file(callback.message, "webhook.log")
    await callback.answer()

@dp.callback_query(F.data == "clear_logs")
async def cb_clear_logs(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    open("webhook.log", "w", encoding="utf-8").close()
    open("errors.log", "w", encoding="utf-8").close()
    log_admin_action(callback.from_user.id, "–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤")
    await callback.message.answer("üßπ –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã")
    await callback.answer()

@dp.callback_query(F.data == "start_broadcast")
async def initiate_broadcast(callback: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    await state.set_state(AdminStates.awaiting_broadcast_content)
    await callback.message.answer("üì¢ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await callback.answer()

@dp.message(AdminStates.awaiting_broadcast_content)
async def process_broadcast_content(message: Message, state: FSMContext):
    await state.clear()
    cursor.execute("SELECT user_id FROM users")
    users = [row[0] for row in cursor.fetchall()]

    success, failed = 0, 0
    for user_id in users:
        try:
            if message.photo:
                photo = message.photo[-1].file_id
                await bot.send_photo(user_id, photo, caption=message.caption or "")
            elif message.text:
                await bot.send_message(user_id, message.text)
            elif message.document:
                file = message.document.file_id
                await bot.send_document(user_id, file)
            else:
                continue
            await asyncio.sleep(0.1)
            success += 1
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –¥–ª—è {user_id}: {e}")
            failed += 1

    log_admin_action(message.from_user.id, f"–í—ã–ø–æ–ª–Ω–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É. –£—Å–ø–µ—à–Ω–æ: {success}, –û—à–∏–±–æ–∫: {failed}")
    await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\nüì¨ –£—Å–ø–µ—à–Ω–æ: {success}\n‚ùå –û—à–∏–±–æ–∫: {failed}")

@dp.message(Command("cancel"), AdminStates.awaiting_broadcast_content)
async def cancel_broadcast(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

@dp.message(F.text.in_(["‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞", "–∞–¥–º–∏–Ω", "–ê–¥–º–∏–Ω", "admin", "Admin"]))
async def alias_admin_panel(message: Message):
    await admin_panel(message)


# === –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã ===
@dp.message(F.text.in_(["üìé –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã"]))
async def project_links(message: Message):
    buttons = [
        [InlineKeyboardButton(text="üîó It Market", url="https://t.me/Itmarket1_bot")],
        [InlineKeyboardButton(text="üéÆ –ò–≥—Ä—ã —Å –∑–∞—Ä–∞–±–æ—Ç–∫–æ–º", url="https://t.me/One1WinOfficial_bot")],
        [InlineKeyboardButton(text="üì± –ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–æ–∫—Å–∏", url="https://t.me/Proxynumber_bot")],
        [InlineKeyboardButton(text="üßë‚Äçü§ù–£–ë–¢ –°–≤—è–∑–∫–∏", url="https://t.me/LionMarket1_bot")],
        [InlineKeyboardButton(text="üåï –ö—Ä–∏–ø—Ç–æ–º–∞—Ä–∫–µ—Ç", url="https://t.me/CryptoMoneyMark_bot")],
        [InlineKeyboardButton(text="üéÆ –§–∏–ª—å–º—ã –∏ —Å–µ—Ä–∏–∞–ª—ã", url="https://t.me/RedirectIT_bot")],
    ]
    await message.answer("üìå <b>–ù–∞—à–∏ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–µ–∫—Ç—ã:</b>", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons), parse_mode="HTML")


@dp.message(Command("buy"))
@dp.message(F.text == "üí∞ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def buy_subscription(message: Message):
    user_id = message.from_user.id
    ensure_user(user_id)
    try:
        invoice_url = await create_invoice(user_id)
        if not invoice_url:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        await message.answer(
            "üí≥ –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ $1:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å $1", url=invoice_url)]]
            )
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        

# === ‚úçÔ∏è –¶–∏—Ç–∞—Ç—ã –¥–Ω—è ===

@dp.message(F.text.in_(["‚úçÔ∏è –¶–∏—Ç–∞—Ç—ã –¥–Ω—è"]))
async def handle_text_generation(message: Message, state: FSMContext):
    await state.clear()
    control_buttons = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="stop_generation")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])
    await state.set_state("generating_text")
    await message.answer("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞—á–∞–ª–∞—Å—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", reply_markup=control_buttons)
    await generate_text_logic(message, state)


# === –õ–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ===

async def generate_text_logic(message: Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        ensure_user(user_id)

        if client is None:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: AI-–∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
            return

        if str(user_id) != str(ADMIN_ID) and is_limited(user_id):
            await message.answer("üîê –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω. –ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")
            return

        response = await client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": "–ù–∞–ø–∏—à–∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â—É—é —Ü–∏—Ç–∞—Ç—É"}],
            max_tokens=100,
        )
        text = response.choices[0].message.content.strip()
        await message.answer(f"üìù {text}")

        if str(user_id) != str(ADMIN_ID):
            increment_usage(user_id)
            cursor.execute(
                "INSERT INTO history (user_id, type, prompt) VALUES (?, ?, ?)",
                (user_id, "text", "–≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∞—è —Ü–∏—Ç–∞—Ç–∞")
            )
            conn.commit()

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞:")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
    finally:
        await state.clear()


# === –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –æ—Ç–º–µ–Ω–∞ ===

@dp.callback_query(F.data == "stop_generation")
async def stop_generation(callback: types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state == "generating_text":
        await state.clear()
        await callback.message.answer("‚èπ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=main_menu())
    else:
        await callback.message.answer("‚ÑπÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.", reply_markup=main_menu())
    await callback.answer()

@dp.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é", reply_markup=main_menu())
    await callback.answer()

@dp.message(Command("cancel"))
async def cancel_generation(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == "generating_text":
        await state.clear()
        await message.answer("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu())


# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ===

@dp.message(F.text.in_(["üé®–°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"]))
async def handle_image_prompt(message: Message, state: FSMContext):
    await state.clear()
    control_buttons = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="stop_generation")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])
    await state.set_state(GenStates.await_image)
    sent_msg = await message.answer("üñº –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã):", reply_markup=control_buttons)
    asyncio.create_task(update_timer(state, sent_msg, message, control_buttons))


@dp.message(Command("cancel"))
async def cancel_image_generation(message: Message, state: FSMContext):
    if await state.get_state() == GenStates.await_image:
        await state.clear()
        await message.answer("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu())


@dp.callback_query(F.data == "stop_generation")
async def stop_image_generation(callback: types.CallbackQuery, state: FSMContext):
    if await state.get_state() == GenStates.await_image:
        await state.clear()
        await callback.message.answer("‚èπ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=main_menu())
    else:
        await callback.message.answer("‚ÑπÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.", reply_markup=main_menu())
    await callback.answer()


async def update_timer(state: FSMContext, sent_msg: types.Message, message: types.Message, control_buttons):
    for seconds_left in [45, 30, 15]:
        await asyncio.sleep(15)
        if await state.get_state() != GenStates.await_image:
            return
        user_data = await state.get_data()
        if user_data.get("prompt_received"):
            return
        try:
            await sent_msg.edit_text(f"üñº –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n\n‚è≥ –û—Å—Ç–∞–ª–æ—Å—å {seconds_left} —Å–µ–∫—É–Ω–¥", reply_markup=control_buttons)
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–∞: {e}")
            return

    await asyncio.sleep(15)
    if await state.get_state() == GenStates.await_image:
        await state.clear()
        try:
            await sent_msg.edit_text("‚åõÔ∏è –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu())
        except Exception:
            await message.answer("‚åõÔ∏è –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu())


@dp.message(F.state == GenStates.await_image)
async def process_image_generation(message: Message, state: FSMContext):
    text = message.text.strip()
    if not text or text in {"üåå Gemini AI", "üå† Gemini –ü—Ä–∏–º–µ—Ä—ã", "üé®–°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "‚úçÔ∏è –¶–∏—Ç–∞—Ç—ã –¥–Ω—è"}:
        return

    try:
        user_id = message.from_user.id
        prompt = text

        if len(prompt) < 3:
            await message.answer("‚ùå –ü—Ä–æ–º–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 3 —Å–∏–º–≤–æ–ª–æ–≤.")
            return

        await state.update_data(prompt_received=True)

        if client is None:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: AI-–∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
            return

        if str(user_id) != str(ADMIN_ID) and is_limited(user_id):
            await message.answer("üîê –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω. –ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")
            return

        await message.answer("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")

        dalle = await client.images.generate(prompt=prompt, model="dall-e-3", n=1, size="1024x1024")
        image_url = dalle.data[0].url if dalle and dalle.data else None

        if not image_url:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
            return

        async with aiohttp.ClientSession() as session:
            async with session.get(image_url) as resp:
                if resp.status == 200:
                    image_bytes = await resp.read()
                    await message.answer_photo(
                        types.BufferedInputFile(image_bytes, filename="image.png"),
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="üé® –ï—â—ë –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="generate_another")],
                            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
                        ])
                    )
                else:
                    await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
                    return

        if str(user_id) != str(ADMIN_ID):
            increment_usage(user_id)
            cursor.execute(
                "INSERT INTO history (user_id, type, prompt) VALUES (?, ?, ?)",
                (user_id, "image", prompt)
            )
            conn.commit()

        await state.clear()

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@dp.callback_query(F.data == "generate_another")
async def generate_another(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(GenStates.await_image)
    await callback.message.answer("üñº –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã):")
    await callback.answer()


@dp.callback_query(F.data == "back_to_menu")
async def back_to_menu_from_image(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é", reply_markup=main_menu())
    await callback.answer()


# === üåå Gemini AI ‚Äî –£–º–Ω—ã–π –¥–∏–∞–ª–æ–≥ ===

@dp.message(F.text.in_(["üåå Gemini AI"]))
async def start_gemini_dialog(message: Message, state: FSMContext):
    await state.clear()
    control_buttons = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="stop_assistant")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])
    await state.set_state(StateAssistant.dialog)
    await message.answer("üåå –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ–∂–∏–º Gemini! –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:", reply_markup=control_buttons)


@dp.message(StateAssistant.dialog)
async def handle_gemini_dialog(message: Message, state: FSMContext):
    if message.text in ["üåå Gemini AI", "üå† Gemini –ü—Ä–∏–º–µ—Ä—ã", "üé®–°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "‚úçÔ∏è –¶–∏—Ç–∞—Ç—ã –¥–Ω—è"]:
        return  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫

    try:
        user_id = message.from_user.id
        prompt = message.text.strip()

        if not prompt or len(prompt) < 2:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –∑–∞–ø—Ä–æ—Å.")
            return

        ensure_user(user_id)

        if client is None:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: AI-–∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
            return

        if str(user_id) != str(ADMIN_ID) and is_limited(user_id):
            await message.answer("üîí –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω. –ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É üí∞")
            return

        await message.answer("üí≠ –î—É–º–∞—é...")

        response = await client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            timeout=15.0
        )
        reply = response.choices[0].message.content.strip()
        await message.answer(reply)

        if str(user_id) != str(ADMIN_ID):
            increment_usage(user_id)
            cursor.execute(
                "INSERT INTO history (user_id, type, prompt) VALUES (?, ?, ?)",
                (user_id, "gemini", prompt)
            )
            conn.commit()

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –≤ Gemini:")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


# === Gemini –ü—Ä–∏–º–µ—Ä—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ ===

@dp.message(F.text == "üå† Gemini –ü—Ä–∏–º–µ—Ä—ã")
async def gemini_examples(message: Message, state: FSMContext):
    await state.clear()
    examples = [
        [InlineKeyboardButton(text="–ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", callback_data="prompt_example"),
         InlineKeyboardButton(text="–ü–µ–π–∑–∞–∂", callback_data="img_landscape")],
        [InlineKeyboardButton(text="–ê–Ω–∏–º–µ-–¥–µ–≤—É—à–∫–∞", callback_data="img_anime_girl"),
         InlineKeyboardButton(text="–§—ç–Ω—Ç–µ–∑–∏-–≥–æ—Ä–æ–¥", callback_data="img_fantasy_city")],
        [InlineKeyboardButton(text="–û—Ñ–∏—Å", callback_data="img_modern_office"),
         InlineKeyboardButton(text="–î–µ—Å–µ—Ä—Ç", callback_data="img_food_dessert")],
        [InlineKeyboardButton(text="–õ—é–∫—Å-–∞–≤—Ç–æ", callback_data="img_luxury_car"),
         InlineKeyboardButton(text="–ò–Ω—Ç–µ—Ä—å–µ—Ä –ª–æ—Ñ—Ç", callback_data="img_loft_interior")],
        [InlineKeyboardButton(text="–ü–æ–≥–æ–¥–∞", callback_data="weather_example"),
         InlineKeyboardButton(text="–ù–æ–≤–æ—Å—Ç–∏", callback_data="news_example")],
        [InlineKeyboardButton(text="–§–∏–ª—å–º—ã", callback_data="movies_example"),
         InlineKeyboardButton(text="–ó–∞—Ä–∞–±–æ—Ç–æ–∫", callback_data="money_example")],
        [InlineKeyboardButton(text="üåπ –°–ª—É—á–∞–π–Ω—ã–π", callback_data="random_example")],
        [InlineKeyboardButton(text="‚ûï –°–≤–æ–π –∑–∞–ø—Ä–æ—Å", callback_data="new_query")],
        [InlineKeyboardButton(text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="stop_assistant"),
         InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    await message.answer("üå† –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ–º–ø—Ç:", reply_markup=InlineKeyboardMarkup(inline_keyboard=examples))
    await state.set_state(StateAssistant.dialog)


@dp.callback_query(F.data == "random_example")
async def gemini_random_example(callback: types.CallbackQuery, state: FSMContext):
    examples = [
        "img_landscape", "img_anime_girl", "img_fantasy_city", "img_modern_office",
        "img_food_dessert", "img_luxury_car", "img_loft_interior",
        "weather_example", "news_example", "movies_example", "money_example", "prompt_example"
    ]
    await gemini_dispatch(callback, state, random.choice(examples))


@dp.callback_query(F.data == "new_query")
async def gemini_new_query(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if str(user_id) != str(ADMIN_ID) and is_limited(user_id):
        await callback.message.answer("üí∏ –õ—é–±–æ–π –∑–∞–ø—Ä–æ—Å ‚Äî –∑–∞ –≤–∞—à–∏ –¥–µ–Ω—å–≥–∏! –ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É ü™ô")
        await callback.answer()
        return
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Ç–µ–º—É:")
    await state.set_state(StateAssistant.dialog)
    await callback.answer()


@dp.callback_query()
async def gemini_dispatch(callback: types.CallbackQuery, state: FSMContext, example_id: str = None):
    user_id = callback.from_user.id
    is_admin = str(user_id) == str(ADMIN_ID)

    ensure_user(user_id)

    if not is_admin and is_limited(user_id):
        await callback.message.answer("üîí –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω. –ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É üí∞", reply_markup=main_menu())
        await callback.answer()
        return

    prompt_map = {
        "img_landscape": "–ü–µ–π–∑–∞–∂ –Ω–∞ –∑–∞–∫–∞—Ç–µ, –≥–æ—Ä—ã, –æ–∑–µ—Ä–æ, 8K realism",
        "img_anime_girl": "–ê–Ω–∏–º–µ –¥–µ–≤—É—à–∫–∞ —Å –∫–∞—Ç–∞–Ω–æ–π –≤ Cyberpunk —Å—Ç–∏–ª–µ",
        "img_fantasy_city": "–§—ç–Ω—Ç–µ–∑–∏ –≥–æ—Ä–æ–¥ —Å –ª–µ—Ç–∞—é—â–∏–º–∏ –æ—Å—Ç—Ä–æ–≤–∞–º–∏",
        "img_modern_office": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ—Ñ–∏—Å, –ø–∞–Ω–æ—Ä–∞–º–Ω—ã–µ –æ–∫–Ω–∞",
        "img_food_dessert": "–î–µ—Å–µ—Ä—Ç, –∫–∞–∫ –Ω–∞ food-photography",
        "img_luxury_car": "–°–ø–æ—Ä—Ç–∫–∞—Ä –Ω–æ—á—å—é, –Ω–µ–æ–Ω, —É–ª–∏—Ü–∞, —Å—Ç–∏–ª—å 8K",
        "img_loft_interior": "–õ–æ—Ñ—Ç –∏–Ω—Ç–µ—Ä—å–µ—Ä, —Å–≤–µ—Ç, –∫–æ–º–Ω–∞—Ç–∞",
        "weather_example": "–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –ê–ª–º–∞—Ç—ã –∑–∞–≤—Ç—Ä–∞?",
        "news_example": "–ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å –≤ –º–∏—Ä–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞?",
        "movies_example": "–ß—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑ –Ω–æ–≤—ã—Ö —Ñ–∏–ª—å–º–æ–≤?",
        "money_example": "–ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π?",
        "prompt_example": "–ü—Ä–∏–¥—É–º–∞–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—É–ø–µ—Ä–∫–∞—Ä–∞"
    }

    data_id = example_id or callback.data
    prompt = prompt_map.get(data_id)

    if not prompt:
        await callback.answer("‚ùå –ü—Ä–∏–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    if client is None:
        await callback.message.answer("‚ùå AI-–∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        await callback.answer()
        return

    if not is_admin:
        increment_usage(user_id)
        cursor.execute(
            "INSERT INTO history (user_id, type, prompt) VALUES (?, ?, ?)",
            (user_id, "example", prompt)
        )
        conn.commit()
        log_admin_action(user_id, f"–í—ã–±—Ä–∞–ª –ø—Ä–∏–º–µ—Ä: {data_id} ‚Äì {prompt}")

    await callback.message.answer("üí≠ –î—É–º–∞—é...")

    try:
        response_text = await gemini_generate_response(prompt)
        await callback.message.answer(response_text)
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Gemini-–æ—Ç–≤–µ—Ç–∞ –¥–ª—è prompt: {prompt}")
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")

    await callback.answer()


async def gemini_generate_response(prompt: str) -> str:
    response = await client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}],
        timeout=15.0
    )
    return response.choices[0].message.content.strip()
